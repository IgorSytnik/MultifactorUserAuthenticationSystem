package MFA;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Random;

/**
 * Contains method for working with secret share schemes.<br>
 * Point of entry for working with secret share schemes.
 *
 * <p>Only one secret share scheme is used here: {@link Shamir}.
 *
 * @author Igor Sytnik
 */
public class Manager {
    /**
     * A certainty value for generating a prime number.
     * <p>A measure of the uncertainty that the caller is
     * willing to tolerate.  The probability that the new BigInteger
     * represents a prime number will exceed
     * (1 - 1/2<sup>{@code certainty}</sup>).
     *
     * @see BigInteger#BigInteger(int, int, Random)
     */
    private int CERTAINTY;
    /**
     * A random number generator object for generating a prime number.
     * Source of random bits used to select candidates to be
     * tested for primality.
     *
     * @see BigInteger#BigInteger(int, int, Random)
     */
    private SecureRandom random;
    /**
     * A secret that is going to be split into shares.
     */
    private BigInteger secret;
    /**
     * A prime number to make a scheme more secure.
     *
     * @see BigInteger#BigInteger(int, int, Random)
     */
    private BigInteger prime;
    /**
     * An array of shares that's generated by splitting the {@link Manager#secret}.
     */
    private SecretShare[] shares;

    public Manager(BigInteger secret, int needed, int available) {
        this.CERTAINTY = 256;
        this.random = new SecureRandom();
        this.secret = secret;
        this.prime = new BigInteger(this.secret.bitLength() + 1, CERTAINTY, random);
        this.shares = Shamir.split(this.secret, needed, available, prime, random);
    }

    public Manager(BigInteger prime, SecretShare[] shares) {
        this.CERTAINTY = 256;
        this.random = new SecureRandom();
        this.prime = prime;
        this.shares = shares;
    }

    public Manager(BigInteger prime) {
        this.CERTAINTY = 256;
        this.random = new SecureRandom();
        this.prime = prime;
    }

    public BigInteger getSecret() {
        return secret;
    }

    public BigInteger getPrime() {
        return prime;
    }

    public SecretShare[] getShares() {
        return shares;
    }

    /**
     * Combines all <b>shares</b> together using
     * {@link Shamir#combine(SecretShare[], BigInteger)}
     * + {@link Manager#prime}.
     *
     * @param shares {@link SecretShare} objects to be combined
 *                  into a secret.
     * @return secret, received by combining <b>shares</b>.
     */
    public BigInteger getAccess(SecretShare... shares) {
        return Shamir.combine(shares, prime);
    }
}
